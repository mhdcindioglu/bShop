@using System.Diagnostics.CodeAnalysis
@using bShop.Data.Filters
@typeparam TValue where TValue : BaseFilter
@inherits InputSelect<TValue>

@if (Value != null && Value.AllPages > 1)
{
    <div class="row mt-15">
        <div class="col-lg-12">
            <nav>
                <ul class="pagination">
                    <li class="page-item @(disablePrev ? "disabled" : null)" aria-disabled="@disablePrev" aria-label="« Previous">
                        @if (disablePrev)
                        {
                            <span class="page-link" aria-hidden="true">‹</span>
                        }
                        else
                        {
                            <a class="page-link" @onclick="GotoPrev" rel="previous" aria-label="« Previous">‹</a>
                        }
                    </li>
                    @foreach (var btn in btns)
                    {
                        if (btn < Value.CurrentPage)
                        {
                            <li class="page-item">
                                <a class="page-link" @onclick="@(() => GotoPage(btn))">@btn</a>
                            </li>
                        }
                        else if (btn == Value.CurrentPage)
                        {
                            <li class="page-item active" aria-current="page">
                                <span class="page-link">@btn</span>
                            </li>
                        }
                        else if (btn > Value.CurrentPage)
                        {
                            <li class="page-item">
                                <a class="page-link" @onclick="@(() => GotoPage(btn))">@btn</a>
                            </li>
                        }
                    }
                    <li class="page-item @(disableNext ? "disabled" : null)" aria-disabled="@disableNext" aria-label="Next »">
                        @if (disableNext)
                        {
                            <span class="page-link" aria-hidden="true">›</span>
                        }
                        else
                        {
                            <a class="page-link" @onclick="GotoNext" rel="next" aria-label="Next »">›</a>
                        }
                    </li>
                </ul>
            </nav>
        </div>
    </div>
}

@code {
    bool disablePrev => Value?.CurrentPage == 1;
    bool disableNext => Value?.CurrentPage >= Value?.AllPages;
    List<int> btns = [];

    protected override void OnParametersSet()
    {
        btns = [];
        for (int i = 1; i <= (Value?.AllPages ?? 0); i++)
            btns.Add(i);
    }

    async void OnChanged(TValue model)
    {
        Value = model;
        await ValueChanged.InvokeAsync(model);
        StateHasChanged();
    }

    async void GotoPrev()
    {
        if (Value!.CurrentPage > 1)
        {
            Value!.CurrentPage = Value.CurrentPage - 1;
            await ValueChanged.InvokeAsync(Value);
            StateHasChanged();
        }
    }

    async void GotoPage(int page)
    {
        Value!.CurrentPage = page;
        await ValueChanged.InvokeAsync(Value);
        StateHasChanged();
    }

    async void GotoNext()
    {
        if (Value!.CurrentPage < Value!.AllPages)
        {
            Value!.CurrentPage = Value.CurrentPage + 1;
            await ValueChanged.InvokeAsync(Value);
            StateHasChanged();
        }
    }
}
