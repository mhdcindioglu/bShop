@page "/Products"
@page "/{Slug}/Products"
@page "/{Slug}/{Brand}/Products"
@using Humanizer
@using bShop.Components.Pages.ECommerce.Shared
@using bShop.Data.Enums
@using bShop.Data.Filters
@inject ICategoryService CategorySrv
@inject IProductService ProductSrv
@inject NavigationManager NavMngr
@layout NoCategoriesLayout
@rendermode InteractiveServer

<PageTitle>Products - @Resource.BShop_AppTitle</PageTitle>
<Breadcrump Title="@Title" />

<div class="section">
    <div class="container">
        <div class="row">
            <div class="col-lg-3">
                <FilteringSlide Model="@Model" ModelChanged="OnSelectionChanged" />
            </div>
            <div class="col-lg-9">
                <div class="filter-card">
                    <div class="row">
                        <div class="col-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6">
                            <div class="filter_select">
                                <SelectShowing Value="@Model.Showing" ValueExpression="@(() => Model.Showing)" ValueChanged="OnShowingChanged" />
                            </div>
                        </div>
                        <div class="col-6 col-sm-6 col-md-6 col-lg-6 col-xl-6 col-xxl-6">
                            <div class="sort_by_select">
                                <SelectSort Value="Model.Sort" ValueExpression="@(() => Model.Sort)" ValueChanged="OnSortChanged" />
                            </div>
                        </div>
                    </div>
                </div>

                <div id="tp_datalist">
                    <div class="row">
                        @foreach (var Product in Model.Products)
                        {
                            <div class="col-lg-4">
                                <ProductCard Product="Product" MB="25" />
                            </div>
                        }
                    </div>
                    <Pagination TValue="ProductsPageModel" Value="Model" ValueExpression="@(() => Model)" ValueChanged="OnSelectionChanged" />
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter] public string? Slug { get; set; }
    [Parameter] public string? Brand { get; set; }
    ProductsPageModel Model = new();
    string Title
    {
        get
        {
            if (Model.Categories.SelectedItems().Length == 0)
                return "Products";
            else if (Model.Categories.SelectedItems().Length == 1)
                return Model.Categories.SelectedItems().FirstOrDefault()!.Slug.Humanize(LetterCasing.Title);
            else
                return "Multi Categories";
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        try
        {
            Model.Slug = Slug;
            Model.Brand = Brand;
            Model = await ProductSrv.GetProductsPageModel(Model);
            Model.Categories.ForEach(category => category.Selected = category.Slug.Equals(Slug, StringComparison.CurrentCultureIgnoreCase));
            Model.Brands.ForEach(brand => brand.Selected = brand.Name.Equals(Brand, StringComparison.CurrentCultureIgnoreCase));
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }

    async Task Fill()
    {
        try
        {
            Model.Products = await ProductSrv.GetAllAsync(new ProductsFilter { Categories = Model.Categories, Brands = Model.Brands, CurrentPage = Model.CurrentPage, Showing = Model.Showing, Sort = Model.Sort, });
            Model.AllItems = Model.Products.AllCount;
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }

    async Task OnShowingChanged(Showing showing)
    {
        try
        {
            Model.Showing = showing;
            await Fill();
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }

    async Task OnSortChanged(Sort sort)
    {
        try
        {
            Model.Sort = sort;
            await Fill();
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }

    async Task OnSelectionChanged(ProductsPageModel model)
    {
        try
        {
            Model = model;
            await Fill();
        }
        catch (Exception ex)
        {
            ToastSrv.ShowError(ex.Message);
        }
    }

    public class ProductsPageModel : BaseFilter
    {
        public string? Slug { get; set; }
        public string? Brand { get; set; }

        public PageList<CategoryVM> Categories { get; set; } = [];
        public PageList<BrandVM> Brands { get; set; } = [];
        public PageList<ProductCardVM> Products { get; set; } = [];
    }
}
