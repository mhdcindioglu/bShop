@inherits Fluxor.Blazor.Web.Components.FluxorComponent
@using bShop.Data.Entities
@rendermode InteractiveServer
@inject AuthenticationStateProvider AuthProv
@inject ILocalStorageService LocalStorage
@inject IJSRuntime JS
@inject IDispatcher Dispatcher
@inject IState<CartState> CartState
@inject IState<WhiteListState> WhiteListState

<div class="col-lg-12">
    <div class="item-card mb@(MB)">
        <div class="item-image">
            <ul class="labels-list">
                @foreach (var lbl in Product.Labels)
                {
                    <li><span class="tplabel" style="color: @(lbl.FColor); background:@(lbl.BColor);">@lbl.Text</span></li>
                }
            </ul>
            <ul class="product-action">
                <li>
                    <a class="addtocart @(CartActive ? "active" : null)" @onclick="AddToCart" title="Add to cart">
                        <i class="bi bi-cart"></i>
                        @if (CartItems.FirstOrDefault(x => x.ProductId == Product.Id)?.Quantity > 1)
                        {
                            <span class="cart_count total_qty">@CartItems.FirstOrDefault(x => x.ProductId == Product.Id)!.Quantity</span>
                        }
                    </a>
                </li>
                <li>
                    <a class="addtowishlist @(WhiteListActive ? "active" : null)" @onclick="AddToWhiteList" title="@(WhiteListState.Value.WhiteList.Contains(Product.Id) ? "Remove from white list" : "Add to white list")">
                        <i class="bi bi-heart"></i>
                    </a>
                </li>
            </ul>
            <ul class="color-list">
                @foreach (var clr in Product.Colors.Split(";").ToArray())
                {
                    <li style="background: @(clr);"></li>
                }
            </ul>
            @if (Product.Images.Count > 1)
            {
                <div class="row owl-carousel caro-common product-card">
                    @foreach (var img in Product.Images)
                    {
                        <a href="@Product.Link">
                            <img src="imgs/products/@img.Name" alt="@Product.Name" />
                        </a>
                    }
                </div>
            }
            else if (Product.Images.Count == 1)
            {
                <a href="@Product.Link">
                    <img src="imgs/products/@Product.Images[0].Name" alt="@Product.Name" />
                </a>
            }
        </div>
        <h4 class="item-title"><a href="@Product.Link">@Product.Name</a></h4>
        <div class="brand-card">
            <div class="brand">
                <span>@Resource.Brand <a href="brands/@(Product.BrandID)">@Product.BrandName</a></span>
            </div>
            <div class="brand">
                <span>@Resource.SoldBy <a href="vendors/@(Product.VendorID)">@Product.VendorName</a></span>
            </div>
        </div>
        <div class="item-price-card">
            @if (Product.OfferPrice > 0)
            {
                <div class="item-price">@($"{Product.OfferPrice:C2}")</div>
                <div class="old-item-price">@($"{Product.SalePrice:C2}")</div>
            }
            else
            {
                <div class="item-price">@($"{Product.SalePrice:C2}")</div>
            }
        </div>
        <div class="rating-wrap">
            <div class="stars-outer">
                <div class="stars-inner" style="width:@(Product.RatesCount > 0 ? 100 * Product.RatesAverage / 5 : 0)%;"></div>
            </div>
            <span class="rating-count">(@Product.RatesCount)</span>
        </div>
    </div>
</div>
@code {
    [Parameter] public ProductCardVM Product { get; set; } = new();
    [Parameter] public int MB { get; set; } = 30;
    AuthenticationState auth = default!;
    List<CartItem> CartItems => CartState.Value.Cart?.CartItems ?? [];
    bool CartActive => CartItems.Select(x => x.ProductId).Contains(Product.Id);
    bool WhiteListActive => WhiteListState.Value.WhiteList.Contains(Product.Id);

    protected override async Task OnInitializedAsync()
    {
        auth = await AuthProv.GetAuthenticationStateAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await JS.InvokeVoidAsync("productImageSlider", $".product-card");
    }

    async void AddToCart()
    {
        if (auth.User.Identity?.IsAuthenticated != true)
        {
            var cart = await LocalStorage.GetItemAsync<Cart>("Cart") ?? new();
            var item = cart.CartItems.FirstOrDefault(x => x.ProductId == Product.Id);
            if (item == null)
                cart.CartItems.Add(new CartItem
                    {
                        ProductId = Product.Id,
                        Quantity = 1,
                        Price = Product.OfferPrice.HasValue ? Product.OfferPrice.Value : Product.SalePrice,
                    });
            else
                ++item.Quantity;

            await LocalStorage.SetItemAsync("Cart", cart);
            Dispatcher.Dispatch(new UpdateCartAction(cart));
        }
    }

    async void AddToWhiteList()
    {
        if (auth.User.Identity?.IsAuthenticated != true)
        {
            var whiteList = await LocalStorage.GetItemAsync<List<int>>("WhiteList") ?? [];
            if (!whiteList.Contains(Product.Id))
                whiteList.Add(Product.Id);
            else
                whiteList.Remove(Product.Id);

            await LocalStorage.SetItemAsync("WhiteList", whiteList);
            Dispatcher.Dispatch(new UpdateWhiteListAction(whiteList));
        }
    }
}
