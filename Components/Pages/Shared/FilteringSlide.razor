@using bShop.Data.Filters
@using static bShop.Components.Pages.ECommerce.ProductsPage
@inject ICategoryService CategorySrv

<div class="sidebar mb20">
    @if (Model.Categories.Any())
    {
        <div class="widget mb40">
            <h5 class="widget-title">Filter by Category</h5>
            <div class="checkboxlist">
                <ul class="checkbox-list">
                    @foreach (var category in Model.Categories.Where(x => x.ProductsCount > 0))
                    {
                        <li>
                            <label class="checkbox-title">
                                <InputCheckbox class="filter_by_category"  Value="@category.Selected" ValueExpression="@(() => category.Selected)" ValueChanged="@((val) => OnCategorySelectionChanged(val, category))" /> @category.Name <span class="num">(@category.ProductsCount)</span>
                            </label>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
    @if (Model.Brands.Any())
    {
        <div class="widget mb40">
            <h5 class="widget-title">Filter by Brand</h5>
            <div class="checkboxlist">
                <ul class="checkbox-list">
                    @foreach (var brand in Model.Brands.Where(x => x.ProductsCount > 0))
                    {
                        <li>
                            <label class="checkbox-title">
                                <InputCheckbox class="filter_by_brand" Value="@brand.Selected" ValueExpression="@(() => brand.Selected)" ValueChanged="@((val) => OnBrandSelectionChanged(val, brand))" /> @brand.Name <span class="num">(@brand.ProductsCount)</span>
                            </label>
                        </li>
                    }
                </ul>
            </div>
        </div>
    }
</div>
@code {
    [Parameter] public required ProductsPageModel Model { get; set; }
    [Parameter] public EventCallback<ProductsPageModel> ModelChanged { get; set; }

    async Task OnCategorySelectionChanged(bool val, CategoryVM category)
    {
        category.Selected = val;
        await ModelChanged.InvokeAsync(Model);
    }

    async Task OnBrandSelectionChanged(bool val, BrandVM brand)
    {
        brand.Selected = val;
        await ModelChanged.InvokeAsync(Model);
    }
}
